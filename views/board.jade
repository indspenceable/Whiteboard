doctype 5
html(lang="en")
  head
    title Whiteboard
    link(rel="stylesheet", type="text/css", href="bootstrap.min.css")
    link(rel="stylesheet", type="text/css", href="whiteboard.css")
    script(src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js")
    script(src="/socket.io/socket.io.js")
    script
      var drawing = false
      var drawBuffer = []
      var eraseBuffer = []
      
      var canvas
      var context 
      var canvasOffsetX
      var canvasOffsetY
      var lastLocallyCapturedPoint
      var mode = 'drawing'
      var shown = false
      
      function mouseUp() {
        drawing=false
      }
      function mouseDown() {
        drawing = true
      }
      
      function drawInLine(p) {
        var xd = lastLocallyCapturedPoint.x-p.x
        var yd = lastLocallyCapturedPoint.y-p.y
        var steps = Math.abs(xd) + Math.abs(yd) / 5
        for (var i = 0; i < steps; i++) {
          if (mode == 'drawing') {
            var point = {x:Math.floor(p.x + i*(xd) / steps), y:Math.floor(p.y + i*(yd) / steps)}
            draw(point)
            drawBuffer.push(point)
          } else {
            var point = {x:Math.floor(p.x + i*(xd) / steps), y:Math.floor(p.y + i*(yd) / steps)}
            erase(point)
            eraseBuffer.push(point)
          }
        }
      }
      
      function mouseMove(event) {
        var point = {x:event.pageX - canvasOffsetX, y:event.pageY - canvasOffsetY}
        if(drawing && shown) {
          drawInLine(point)
        }
        lastLocallyCapturedPoint = point
      }
      var RAD = 5
      function draw(point) {
        context.fillStyle = '#000'
        context.fillRect(point.x-RAD/2, point.y-RAD/2,RAD,RAD)
      }
      function erase(point) {
        context.fillStyle = '#fff'
        context.fillRect(point.x-RAD/2, point.y-RAD/2,RAD,RAD)
      }
      function windowResize() {
        canvasOffsetX = canvas.offset().left
        canvasOffsetY = canvas.offset().top
      }
      $(window).resize(windowResize);
      
      function showCanvas(points) {
        shown = true
        context.fillStyle = '#fff'
        context.fillRect(0,0, 940, 500);
        points.forEach(draw)
        $('.loading').hide(1000, function(){
          $('.canvas').show(1000)
          windowResize()
        })
      }
      
      $(function() {
        canvas = $('canvas')
        canvasOffsetX = 0
        canvasOffsetY = 0
        context = canvas.get(0).getContext('2d');
        
        $(document).mouseup(mouseUp).mousedown(mouseDown).mousemove(mouseMove)
        $('.js-draw').click(function() {
          $(this).addClass('active').siblings().removeClass('active')
          mode = 'drawing'
        })
        $('.js-erase').click(function(){
          $(this).addClass('active').siblings().removeClass('active')
          mode = 'erasing'
        })
        
        $('.js-mode-toggle').click(function() {
          if (mode == 'drawing') {
            $('.draw').hide(500, function() {
              $('.erase').show(500)
            })
            mode = 'erasing'
          } else {
            $('.erase').hide(500, function() {
              $('.draw').show(500)
            })
            mode = 'drawing'
          }
        })
        
        var socket = io.connect();
        socket.emit('join', {board: "#{board}"})
        
        socket.on('draw', function(data){
          if (shown) {
            data.points.forEach(draw)
          } else {
            showCanvas(data.points);
          }
        })
        socket.on('erase', function(data){
          data.points.forEach(erase)
        })
        socket.on('clear', function(data) {
          context.fillStyle = '#fff'
          context.fillRect(0,0, canvas.width(), canvas.height());
        })
        $('.js-clear').click(function() {
          socket.emit('clear', {})
          context.fillStyle = '#fff'
          context.fillRect(0,0, canvas.width(), canvas.height());
        })
        
        setInterval(function() {
          if(drawBuffer.length > 0) {
            socket.emit('draw', {points: drawBuffer})
            drawBuffer = []
          }
          if (eraseBuffer.length > 0) {
            socket.emit('erase', {points: eraseBuffer})
            eraseBuffer = []
          }
        }, 20)
      })

  body
    .navbar.navbar-fixed-top
      .navbar-inner
        .container
          a.brand(href="/") Whiteboard
    .container
      h1 #{title}
      .canvas(style="display: none")
        p
          .btn-group
            a.btn.js-draw.btn-success.active(href='#') Draw
            a.btn.js-erase.btn-danger(href='#') Erase
        canvas(width="940px", height="500px", style="border: 1px solid black")
      .loading
        | Please wait, your whiteboard is getting set up...
